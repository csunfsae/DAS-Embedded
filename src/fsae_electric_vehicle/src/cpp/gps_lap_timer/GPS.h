#pragma once

#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <string>
#include <fsae_electric_vehicle/gps.h> // This gps.h is generated by ROS
#include "ros/ros.h"
#include "CANController.h"

//#define float double // For MSVC

#define MIN(x, y)                     (((x) < (y)) ? (x) : (y))
#define MAX(x, y)                     (((x) > (y)) ? (x) : (y))
#define DEGTORAD(deg)                 (deg*57.29577995f)
#define D_TO_RADIANS                  (PI/180.0f)

// GPS RMC sentence fields.
#define GPS_HOURS				0
#define GPS_MINUTES				1
#define GPS_SECONDS				2
#define GPS_FIX      			3
#define GPS_SPEED    			4
#define GPS_HEADING_1			5
#define GPS_HEADING_2			6

#define GPS_ONE_FRAME_ONE_ID	0x35	// Contains data that isnt latitude & longitude. Includes fix, time, heading....
#define GPS_ONE_FRAME_TWO_ID	0x36	// Contains latitude & longitude data
#define GPS_TWO_FRAME_ONE_ID	0x37	// Contains data that isnt latitude & longitude. Includes fix, time, heading....
#define GPS_TWO_FRAME_TWO_ID	0x38	// Contains latitude & longitude data


enum validFrame {noFrames = 0, unitOneFrameOne, unitOneFrameOneAndTwo, unitTwoFrameOne, unitTwoFrameOneAndTwo};

// GPS update frequency and period.
const std::size_t GPS_UPDATE_FREQUENCY = 5; // Hz.
static constexpr float GPS_UPDATE_PERIOD{ 1.0f/GPS_UPDATE_FREQUENCY };

// Distance calculations.
static constexpr float PI{ 3.141592654 };
static constexpr float EARTH_RADIUS{ 3956.0 }; // In miles. 

// Definitions for the startline.
static constexpr float LINE_WIDTH{ 50.0f };
static constexpr float LINE_WIDTH_2{ 25.0f };
static constexpr float PROJECTION_DISTANCE{ 100.0f };


// File is used for testing. It replaces the data coming from the CANBUS
//#define FILE_INPUT

#ifdef FILE_INPUT
const char* filePath = "/home/btc54/Desktop/formulaEmbedded/src/fsae_electric_vehicle/src/cpp/gps_lap_timer/data.txt";
FILE* file = NULL;
bool FILE_INPUT_EOF = false;
#endif